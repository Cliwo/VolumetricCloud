//SampleCloud
/* Input
_CloudScale
_CloudDetailScale

_NWindScale
_WindScale

_CloudHeightGradient1
_CloudHeightGradient2
_CloudHeightGradient3

_NoiseTex01
XYFrames

_NoiseBias
_NoiseEdgeBias

*/
struct Function
{
    float Lerp3(float v0, float v1, float v2, float a)
    {
        return a < 0.5 ? lerp(v0, v1, a * 2.0) : lerp(v1, v2, (a - 0.5) * 2.0);
    }

    float GradientStep(float a, float4 gradient)
    {
        return smoothstep(gradient.x, gradient.y, a) - smoothstep(gradient.z, gradient.w, a);
    }

    float SampleCloud(float Time,
        float CloudScale, float CloudDetailScale, float NWindScale, float WindScale, 
        float4 CloudHeightGradient1, float4 CloudHeightGradient2, float4 CloudHeightGradient3,
        Texture2D NoiseTex01, SamplerState TexSampler, int XYFrames,
        float NoiseBias, float NoiseEdgeBias,
        float3 uvw, float h, float2 coverage, float minA, float maxA)
    {
        const float baseFreq = 1e-5;

        float noiseFreq1 = 10;
        float noiseFreq2 = 20;

        //UV-----
        float4 uvw1 = float4(uvw * noiseFreq1 * baseFreq * CloudScale, 0);

        //Wind
        uvw1.xyz += float3(0.0001, -0.001, 0) * Time * NWindScale * WindScale;

        //Height Gradient-----
        h = saturate(h);

        float4 gradientScalar = float4(1.0,
            saturate(GradientStep(h, CloudHeightGradient1)),
            saturate(GradientStep(h, CloudHeightGradient2)),
            saturate(GradientStep(h, CloudHeightGradient3)));

        float4 gradient = Lerp3(CloudHeightGradient3,
            CloudHeightGradient2,
            CloudHeightGradient1,
            coverage.y);
        float hGradient = GradientStep(h, gradient);

        //Tex01-----

        float4 n1 = PseudoVolumeTexture(NoiseTex01, TexSampler, uvw1.xyz, XYFrames, XYFrames * XYFrames);

        //Set Noise with Height Gradient
        n1 = saturate(((n1 * gradientScalar) - 0.15) * 0.9 + 0.3);

        float cloudValue = (n1.r + n1.g + n1.b + n1.a) / 4;
        cloudValue = saturate(cloudValue * hGradient);
        cloudValue = smoothstep(NoiseBias, NoiseBias + NoiseEdgeBias, cloudValue);
        cloudValue = saturate(pow(cloudValue, 1.75));
        cloudValue = cloudValue + (0.1 - (0.25 - (cloudValue * 0.1)));
        cloudValue = saturate(cloudValue - (1.0 - coverage.x)) * coverage.x; //coverage 

        return saturate(cloudValue);
    }
};
Function f;
float value = f.SampleCloud(Time,
        CloudScale, CloudDetailScale, NWindScale, WindScale, 
        CloudHeightGradient1, CloudHeightGradient2, CloudHeightGradient3,
        NoiseTex01, NoiseTex01Sampler, XYFrames,
        NoiseBias, NoiseEdgeBias,
        StepPos, Height, Coverage, MinAltitude, MaxAltitude);
return value;
